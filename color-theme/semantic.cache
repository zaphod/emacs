;; Object semantic.cache
;; SEMANTICDB Tags save file
(semanticdb-project-database "semantic.cache"
  :file "semantic.cache"
  :tables (list 
   (semanticdb-table "color-theme-autoloads.el"
    :file "color-theme-autoloads.el"
    :pointmax 5217
    :major-mode 'emacs-lisp-mode
    :tokens '(("generated-autoload-file" variable nil nil nil nil nil [77 109]) ("command-line-args-left" variable nil nil nil nil nil [110 141]) ("color-theme-generate-autoloads" function nil nil nil (interactive) nil [142 371]) ("color-theme-autoloads" package nil nil nil [373 405]) ("color-theme-select" function nil nil ((use-visible . t) (prototype . t)) "Displays a special buffer for selecting and installing a color theme.
With optional prefix ARG, this buffer will include color theme libraries
as well.  A color theme library is in itself not complete, it must be
used as part of another color theme to be useful.  Thus, color theme
libraries are mainly useful for color theme authors." nil [873 1269]) ("color-theme-describe" function nil nil ((use-visible . t) (prototype . t)) "Describe color theme listed at point.
This shows the documentation of the value of text-property color-theme
at point.  The text-property color-theme should be a color theme
function.  See `color-themes'." nil [1271 1539]) ("color-theme-install-at-mouse" function nil nil ((use-visible . t) (prototype . t)) "Install color theme clicked upon using the mouse.
First argument EVENT is used to set point.  Then
`color-theme-install-at-point' is called." nil [1541 1753]) ("color-theme-install-at-point-for-current-frame" function nil nil ((use-visible . t) (prototype . t)) "Install color theme at point for current frame only.
Binds `color-theme-is-global' to nil and calls
`color-theme-install-at-point'." nil [1755 1976]) ("color-theme-print" function nil nil ((use-visible . t) (prototype . t)) "Print the current color theme function.

You can contribute this function to <URL:news:gnu.emacs.sources> or
paste it into your .emacs file and call it.  That should recreate all
the settings necessary for your color theme.

Example:

    (require 'color-theme)
    (defun my-color-theme ()
      \"Color theme by Alex Schroeder, created 2000-05-17.\"
      (interactive)
      (color-theme-install
       '(...
	 ...
	 ...)))
    (my-color-theme)

If you want to use a specific color theme function, you can call the
color theme function in your .emacs directly.

Example:

    (require 'color-theme)
    (color-theme-gnome2)" nil [1978 2665]) ("color-theme-analyze-defun" function nil nil ((use-visible . t) (prototype . t)) "Once you have a color-theme printed, check for missing faces.
This is used by maintainers who receive a color-theme submission
and want to make sure it follows the guidelines by the color-theme
author." nil [2667 2937]) ("color-theme-make-snapshot" function nil nil ((prototype . t)) "Return the definition of the current color-theme.
The function returned will recreate the color-theme in use at the moment." nil [2939 3133]) ("color-theme-compare" function nil nil ((use-visible . t) (prototype . t)) "Compare two color themes.
This will print the differences between installing THEME-A and
installing THEME-B.  Note that the order is important: If a face is
defined in THEME-A and not in THEME-B, then this will not show up as a
difference, because there is no reset before installing THEME-B.  If a
face is defined in THEME-B and not in THEME-A, then this will show up as
a difference." nil [3135 3583]) ("color-theme-install" function nil nil ((prototype . t)) "Install a color theme defined by frame parameters, variables and faces.

The theme is installed for all present and future frames; any missing
faces are created.  See `color-theme-install-faces'.

THEME is a color theme definition.  See below for more information.

If you want to install a color theme from your .emacs, use the output
generated by `color-theme-print'.  This produces color theme function
which you can copy to your .emacs.

A color theme definition is a list:
([FUNCTION] FRAME-PARAMETERS VARIABLE-SETTINGS FACE-DEFINITIONS)

FUNCTION is the color theme function which called `color-theme-install'.
This is no longer used.  There was a time when this package supported
automatic factoring of color themes.  This has been abandoned.

FRAME-PARAMETERS is an alist of frame parameters.  These are installed
with `color-theme-install-frame-params'.  These are installed last such
that any changes to the default face can be changed by the frame
parameters.

VARIABLE-DEFINITIONS is an alist of variable settings.  These are
installed with `color-theme-install-variables'.

FACE-DEFINITIONS is an alist of face definitions.  These are installed
with `color-theme-install-faces'.

If `color-theme-is-cumulative' is nil, a color theme will undo face and
frame-parameter settings of previous color themes." nil [3585 4966]) ("color-theme-submit" function nil nil ((use-visible . t) (prototype . t)) "Submit your color-theme to the maintainer." nil [4968 5072]) ("color-theme-initialize" function nil nil ((use-visible . t) (prototype . t)) "Initialize the color theme package by loading color-theme-libraries." nil [5074 5208]))
    )
   (semanticdb-table "color-theme.el"
    :file "color-theme.el"
    :pointmax 67669
    :major-mode 'emacs-lisp-mode
    :tokens '(("eval-when-compile" code nil [1806 1891]) ("cl" include nil nil nil [1893 1906]) ("cus-face" include nil nil nil [2005 2024]) ("wid-edit" include nil nil nil [2025 2044]) ("color-theme-maintainer-address" variable nil "zedek@gnu.org" ((const . t)) "Address used by `submit-color-theme'." nil [2085 2184]) ("cond" code nil [2240 2448]) ("color-theme-xemacs-p" variable nil (and (featurep (quote xemacs)) (string-match "XEmacs" emacs-version)) nil "Non-nil if running XEmacs." nil [2450 2608]) ("or" code nil [2659 2788]) ("cond" code nil [3398 4017]) ("color-theme-alist" function nil ("plist") nil "Transform PLIST into an alist if it is a plist and return it.
If the first element of PLIST is a cons cell, we just return PLIST,
assuming PLIST to be an alist.  If the first element of plist is not a
symbol, this is an error: We cannot distinguish a plist from an ordinary
list, but a list that doesn't start with a symbol is certainly no plist
and no alist.

This is used to make sure `default-frame-alist' really is an alist and not
a plist.  In XEmacs, the alist is deprecated; a plist is used instead." nil [4019 4729]) ("defgroup" code nil [4762 4943]) ("color-theme-legal-frame-parameters" variable nil "\\(color\\|mode\\)$" nil "Regexp that matches frame parameter names.
Only frame parameter names that match this regexp can be changed as part
of a color theme." nil [4945 5418]) ("color-theme-legal-variables" variable nil "\\(color\\|face\\)$" nil "Regexp that matches variable names.
Only variables that match this regexp can be changed as part of a color
theme.  In addition to matching this name, the variables have to be user
variables (see function `user-variable-p')." nil [5420 5748]) ("color-theme-illegal-faces" variable nil "^w3-" nil "Regexp that matches face names forbidden in themes.
The default setting \"^w3-\" excludes w3 faces since these
are created dynamically." nil [5750 6067]) ("color-theme-illegal-default-attributes" variable nil (quote (:family :height :width)) nil "A list of face properties to be ignored when installing faces.
This prevents Emacs from doing terrible things to your display just because
a theme author likes weird fonts." nil [6069 6369]) ("color-theme-is-global" variable nil t ((user-visible . t)) "*Determines wether a color theme is installed on all frames or not.
If non-nil, color themes will be installed for all frames.
If nil, color themes will be installed for the selected frame only.

A possible use for this variable is dynamic binding. Here is a larger
example to put in your ~/.emacs; it will make the Blue Sea color theme
the default used for the first frame, and it will create two additional
frames with different color themes.

setup:
    (require 'color-theme)
    ;; set default color theme
    (color-theme-blue-sea)
    ;; create some frames with different color themes
    (let ((color-theme-is-global nil))
      (select-frame (make-frame))
      (color-theme-gnome2)
      (select-frame (make-frame))
      (color-theme-standard))

Please note that using XEmacs and and a nil value for
color-theme-is-global will ignore any variable settings for the color
theme, since XEmacs doesn't have frame-local variable bindings.

Also note that using Emacs and a non-nil value for color-theme-is-global
will install a new color theme for all frames.  Using XEmacs and a
non-nil value for color-theme-is-global will install a new color theme
only on those frames that are not using a local color theme." nil [6371 7674]) ("color-theme-is-cumulative" variable nil t ((user-visible . t)) "*Determines wether new color themes are installed on top of each other.
If non-nil, installing a color theme will undo all settings made by
previous color themes." nil [7676 7921]) ("color-theme-directory" variable nil nil nil "Directory where we can find additionnal themes (personnal).
Note that there is at least one directory shipped with the official
color-theme distribution where all contributed themes are located.
This official selection can't be changed with that variable. 
However, you still can decide to turn it on or off and thus,
not be shown with all themes but yours." nil [7923 8369]) ("color-theme-libraries" variable nil (directory-files (concat (file-name-directory (locate-library "color-theme")) "/themes") t "^color-theme") nil "A list of files, which will be loaded in color-theme-initialize depending
on `color-theme-load-all-themes' value. 
This allows a user to prune the default color-themes (which can take a while
to load)." nil [8371 8870]) ("color-theme-load-all-themes" variable nil t nil "When t, load all color-theme theme files
as presented by `color-theme-libraries'. Else
do not load any of this themes." nil [8872 9075]) ("color-theme-mode-hook" variable nil nil nil "Hook for color-theme-mode." nil [9077 9181]) ("color-theme-mode-map" variable nil (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote color-theme-install-at-point)) (define-key map (kbd "c") (quote list-colors-display)) (define-key map (kbd "d") (quote color-theme-describe)) (define-key map (kbd "f") (quote list-faces-display)) (define-key map (kbd "i") (quote color-theme-install-at-point)) (define-key map (kbd "l") (quote color-theme-install-at-point-for-current-frame)) (define-key map (kbd "p") (quote color-theme-print)) (define-key map (kbd "q") (quote bury-buffer)) (define-key map (kbd "?") (quote color-theme-describe)) (if color-theme-xemacs-p (define-key map (kbd "<button2>") (quote color-theme-install-at-mouse)) (define-key map (kbd "<mouse-2>") (quote color-theme-install-at-mouse))) map) nil "Mode map used for the buffer created by `color-theme-select'." nil [9183 9996]) ("color-theme-initialized" variable nil nil nil "Internal variable determining whether color-theme-initialize has been invoked yet" nil [9998 10120]) ("color-theme-buffer-name" variable nil "*Color Theme Selection*" nil "Name of the color theme selection buffer." nil [10122 10226]) ("color-theme-original-frame-alist" variable nil nil nil "nil until one of the color themes has been installed." nil [10228 10331]) ("color-theme-history" variable nil nil nil "List of color-themes called, in reverse order" nil [10333 10415]) ("color-theme-history-max-length" variable nil nil nil "Max length of history to maintain.
Two other values are acceptable: t means no limit, and
nil means that no history is maintained." nil [10417 10716]) ("color-theme-counter" variable nil 0 nil "Counter for every addition to `color-theme-history'.
This counts how many themes were installed, regardless
of `color-theme-history-max-length'." nil [10718 10897]) ("color-theme-entry-path" variable nil (cond ((lookup-key global-map [menu-bar tools]) (quote ("tools"))) ((featurep (quote xemacs)) (setq tool-entry (quote ("Tools")))) (t (quote ("Tools")))) nil "Menu tool entry path." nil [10899 11421]) ("color-theme-add-to-history" function nil ("name") nil "Add color-theme NAME to `color-theme-history'." nil [11423 11925]) ("color-themes" variable nil (quote ((color-theme-aalto-dark "Aalto Dark" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aalto-light "Aalto Light" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aliceblue "Alice Blue" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-andreas "Andreas" "Andreas Busch <Andreas.Busch@politics.ox.ac.uk>") (color-theme-arjen "Arjen" "Arjen Wiersma <arjen@wiersma.org>") (color-theme-beige-diff "Beige Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-bharadwaj "Bharadwaj" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-bharadwaj-slate "Bharadwaj Slate" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-billw "Billw" "Bill White <billw@wolfram.com>") (color-theme-black-on-gray "BlackOnGray" "Sudhir Bhojwani <sbhojwani@altoweb.com>") (color-theme-blippblopp "Blipp Blopp" "Thomas Sicheritz-Ponten<thomas@biopython.org>") (color-theme-simple-1 "Black" "Jonadab <jonadab@bright.net>") (color-theme-blue-erc "Blue ERC" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-gnus "Blue Gnus" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-mood "Blue Mood" "Nelson Loyola <nloyola@yahoo.com>") (color-theme-blue-sea "Blue Sea" "Alex Schroeder <alex@gnu.org>") (color-theme-calm-forest "Calm Forest" "Artur Hefczyc <kobit@plusnet.pl>") (color-theme-charcoal-black "Charcoal Black" "Lars Chr. Hausmann <jazz@zqz.dk>") (color-theme-goldenrod "Cheap Goldenrod" "Alex Schroeder <alex@gnu.org>") (color-theme-clarity "Clarity and Beauty" "Richard Wellum <rwellum@cisco.com>") (color-theme-classic "Classic" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-comidia "Comidia" "Marcelo Dias de Toledo <mtole@ig.com.br>") (color-theme-jsc-dark "Cooper Dark" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light "Cooper Light" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light2 "Cooper Light 2" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-dark-blue "Dark Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-blue2 "Dark Blue 2" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-green "Dark Green" "eddy_woody@hotmail.com") (color-theme-dark-laptop "Dark Laptop" "Laurent Michel <ldm@cs.brown.edu>") (color-theme-deep-blue "Deep Blue" "Tomas Cerha <cerha@brailcom.org>") (color-theme-digital-ofs1 "Digital OFS1" "Gareth Owen <gowen@gwowen.freeserve.co.uk>") (color-theme-euphoria "Euphoria" "oGLOWo@oGLOWo.cjb.net") (color-theme-feng-shui "Feng Shui" "Walter Higgins <walterh@rocketmail.com>") (color-theme-fischmeister "Fischmeister" "Sebastian Fischmeister <sfischme@nexus.lzk.tuwien.ac.at>") (color-theme-gnome "Gnome" "Jonadab <jonadab@bright.net>") (color-theme-gnome2 "Gnome 2" "Alex Schroeder <alex@gnu.org>") (color-theme-gray1 "Gray1" "Paul Pulli <P.Pulli@motorola.com>") (color-theme-gray30 "Gray30" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-kingsajz "Green Kingsajz" "Olgierd `Kingsajz' Ziolko <kingsajz@rpg.pl>") (color-theme-greiner "Greiner" "Kevin Greiner <kgreiner@mapquest.com>") (color-theme-gtk-ide "GTK IDE" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-high-contrast "High Contrast" "Alex Schroeder <alex@gnu.org>") (color-theme-hober "Hober" "Edward O'Connor <ted@oconnor.cx>") (color-theme-infodoc "Infodoc" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-jb-simple "JB Simple" "jeff@dvns.com") (color-theme-jedit-grey "Jedit Grey" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-jonadabian "Jonadab" "Jonadab <jonadab@bright.net>") (color-theme-jonadabian-slate "Jonadabian Slate" "Jonadab <jonadab@bright.net>") (color-theme-katester "Katester" "Higgins_Walter@emc.com") (color-theme-late-night "Late Night" "Alex Schroeder <alex@gnu.org>") (color-theme-lawrence "Lawrence" "lawrence mitchell <wence@gmx.li>") (color-theme-lethe "Lethe" "Ivica Loncar <ivica.loncar@srk.fer.hr>") (color-theme-ld-dark "Linh Dang Dark" "Linh Dang <linhd@nortelnetworks.com>") (color-theme-marine "Marine" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-matrix "Matrix" "Walter Higgins <walterh@rocketmail.com>") (color-theme-marquardt "Marquardt" "Colin Marquardt <colin@marquardt-home.de>") (color-theme-midnight "Midnight" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-mistyday "Misty Day" "Hari Kumar <Hari.Kumar@mtm.kuleuven.ac.be>") (color-theme-montz "Montz" "Brady Montz <bradym@becomm.com>") (color-theme-oswald "Oswald" "Tom Oswald <toswald@sharplabs.com>") (color-theme-parus "Parus" "Jon K Hellan <hellan@acm.org>") (color-theme-pierson "Pierson" "Dan L. Pierson <dan@sol.control.com>") (color-theme-ramangalahy "Ramangalahy" "Solofo Ramangalahy <solofo@irisa.fr>") (color-theme-raspopovic "Raspopovic" "Pedja Raspopovic <pedja@lsil.com>") (color-theme-renegade "Renegade" "Dave Benjamin <ramen@ramenfest.com>") (color-theme-resolve "Resolve" "Damien Elmes <resolve@repose.cx>") (color-theme-retro-green "Retro Green" "Alex Schroeder <alex@gnu.org>") (color-theme-retro-orange "Retro Orange" "Alex Schroeder <alex@gnu.org>") (color-theme-robin-hood "Robin Hood" "Alex Schroeder <alex@gnu.org>") (color-theme-rotor "Rotor" "Jinwei Shen <shenjw@wam.umd.edu>") (color-theme-ryerson "Ryerson" "Luis Fernandes <elf@ee.ryerson.ca>") (color-theme-salmon-diff "Salmon Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-salmon-font-lock "Salmon Font-Lock" "Alex Schroeder <alex@gnu.org>" t) (color-theme-scintilla "Scintilla" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-shaman "Shaman" "shaman@interdon.net") (color-theme-sitaramv-nt "Sitaram NT" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-sitaramv-solaris "Sitaram Solaris" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-snow "Snow" "Nicolas Rist <Nicolas.Rist@alcatel.de>") (color-theme-snowish "Snowish" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-standard-ediff "Standard Ediff" "Emacs Team, added by Alex Schroeder <alex@gnu.org>" t) (color-theme-standard "Standard Emacs 20" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-21 "Standard Emacs 21" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-nw "Standard Emacs 21 No Window" "Emacs Team, added by D. Goel <deego@gnufans.org>") (color-theme-xemacs "Standard XEmacs" "XEmacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-subtle-blue "Subtle Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-subtle-hacker "Subtle Hacker" "Colin Walters <levanti@verbum.org>") (color-theme-taming-mr-arneson "Taming Mr Arneson" "Erik Arneson <erik@aarg.net>") (color-theme-taylor "Taylor" "Art Taylor <reeses@hemisphere.org>") (color-theme-tty-dark "TTY Dark" "O Polite <m2@plusseven.com>") (color-theme-vim-colors "Vim Colors" "Michael Soulier <msoulier@biryani.nssg.mitel.com>") (color-theme-whateveryouwant "Whateveryouwant" "Fabien Penso <penso@linuxfr.org>, color by Scott Jaderholm <scott@jaderholm.com>") (color-theme-wheat "Wheat" "Alex Schroeder <alex@gnu.org>") (color-theme-pok-wob "White On Black" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-pok-wog "White On Grey" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-word-perfect "WordPerfect" "Thomas Gehrlein <Thomas.Gehrlein@t-online.de>") (color-theme-xp "XP" "Girish Bharadwaj <girishb@gbvsoft.com>"))) nil "List of color themes.

Each THEME is itself a three element list (FUNC NAME MAINTAINER &optional LIBRARY).

FUNC is a color theme function which does the setup.  The function
FUNC may call `color-theme-install'.  The color theme function may be
interactive.

NAME is the name of the theme and MAINTAINER is the name and/or email of
the maintainer of the theme.

If LIBRARY is non-nil, the color theme will be considered a library and
may not be shown in the default menu.

If you defined your own color theme and want to add it to this list,
use something like this:

  (add-to-list 'color-themes '(color-theme-gnome2 \"Gnome2\" \"Alex\"))" nil [12076 20386]) ("color-theme-backup-original-values" function nil nil nil "Back up the original `default-frame-alist'.
The values are stored in `color-theme-original-frame-alist' on
startup." nil [20403 20762]) ("add-hook" code nil [20763 20826]) ("color-theme-select" function nil ("&optional" "arg") ((user-visible . t)) "Displays a special buffer for selecting and installing a color theme.
With optional prefix ARG, this buffer will include color theme libraries
as well.  A color theme library is in itself not complete, it must be
used as part of another color theme to be useful.  Thus, color theme
libraries are mainly useful for color theme authors." nil [20843 22557]) ("when" code nil [22559 22752]) ("color-theme-mode" function nil nil nil "Major mode to select and install color themes.

Use \\[color-theme-install-at-point] to install a color theme on all frames.
Use \\[color-theme-install-at-point-for-current-frame] to install a color theme for the current frame only.

The changes are applied on top of your current setup.  This is a
feature.

Some of the themes should be considered extensions to the standard color
theme: they modify only a limited number of faces and variables.  To
verify the final look of a color theme, install the standard color
theme, then install the other color theme.  This is a feature. It allows
you to mix several color themes.

Use \\[color-theme-describe] to read more about the color theme function at point.
If you want to install the color theme permanently, put the call to the
color theme function into your ~/.emacs:

    (require 'color-theme)
    (color-theme-gnome2)

If you worry about the size of color-theme.el: You are right.  Use
\\[color-theme-print] to print the current color theme and save the resulting buffer
as ~/.emacs-color-theme.  Now you can install only this specific color
theme in your .emacs:

    (load-file \"~/.emacs-color-theme\")
    (my-color-theme)

The Emacs menu is not affected by color themes within Emacs.  Depending
on the toolkit you used to compile Emacs, you might have to set specific
X ressources.  See the info manual for more information.  Here is an
example ~/.Xdefaults fragment:

    emacs*Background: DarkSlateGray
    emacs*Foreground: wheat

\\{color-theme-mode-map}

The color themes are listed in `color-themes', which see." nil [22754 24606]) ("color-theme-describe" function nil nil ((user-visible . t)) "Describe color theme listed at point.
This shows the documentation of the value of text-property color-theme
at point.  The text-property color-theme should be a color theme
function.  See `color-themes'." nil [24667 24986]) ("color-theme-install-at-mouse" function nil ("event") ((user-visible . t)) "Install color theme clicked upon using the mouse.
First argument EVENT is used to set point.  Then
`color-theme-install-at-point' is called." nil [25003 25294]) ("color-theme-install-at-point" function nil nil ((user-visible . t)) "Install color theme at point.
This calls the value of the text-property `color-theme' at point.
The text-property `color-theme' should be a color theme function.
See `color-themes'." nil [25308 26148]) ("color-theme-install-at-point-for-current-frame" function nil nil ((user-visible . t)) "Install color theme at point for current frame only.
Binds `color-theme-is-global' to nil and calls
`color-theme-install-at-point'." nil [26165 26447]) ("color-theme-filter" function nil ("old-list" "regexp" "&optional" "exclude") nil "Filter OLD-LIST.
The resulting list will be newly allocated and contains only elements
with names matching REGEXP.  OLD-LIST may be a list or an alist.  If you
want to filter a plist, use `color-theme-alist' to convert your plist to
an alist, first.

If the optional argument EXCLUDE is non-nil, then the sense is
reversed: only non-matching elements will be retained." nil [26525 27683]) ("color-theme-spec-filter" function nil ("spec") nil "Filter the attributes in SPEC.
This makes sure that SPEC has the form ((t (PLIST ...))).
Only properties not in `color-theme-illegal-default-attributes'
are included in the SPEC returned." nil [27685 28205]) ("color-theme-plist-delete" function nil ("plist" "prop") nil "Delete property PROP from property list PLIST by side effect.
This modifies PLIST." nil [28510 28987]) ("if" code nil [29310 30263]) ("color-theme-spec-canonical-font" function nil ("atts") nil "Add :bold and :italic attributes if necessary." nil [30564 31095]) ("color-theme-spec-resolve-height" function nil ("old" "new") nil "Return the new height given OLD and NEW height.
OLD is the current setting, NEW is the setting inherited from." nil [31554 32214]) ("color-theme-spec-resolve-inheritance" function nil ("atts") nil "Resolve all occurences of the :inherit attribute." nil [32675 33847]) ("color-theme-spec-maybe-invert" function nil ("atts") nil "Remove the :inverse-video attribute from ATTS.
If ATTS contains :inverse-video t, remove it and swap foreground and
background color.  Return ATTS." nil [34864 35600]) ("color-theme-spec" function nil ("face") nil "Return a list for FACE which has the form (FACE SPEC).
See `defface' for the format of SPEC.  In this case we use only one
DISPLAY, t, and determine ATTS using `color-theme-face-attr-construct'.
If ATTS is nil, (nil) is used  instead.

If ATTS contains :inverse-video t, we remove it and swap foreground and
background color using `color-theme-spec-maybe-invert'.  We do this
because :inverse-video is handled differently in Emacs and XEmacs.  We
will loose on a tty without colors, because in that situation,
:inverse-video means something." nil [36164 36996]) ("color-theme-get-params" function nil nil nil "Return a list of frame parameter settings usable in a color theme.
Such an alist may be installed by `color-theme-install-frame-params'.  The
frame parameters returned must match `color-theme-legal-frame-parameters'." nil [36998 37463]) ("color-theme-get-vars" function nil nil nil "Return a list of variable settings usable in a color theme.
Such an alist may be installed by `color-theme-install-variables'.
The variable names must match `color-theme-legal-variables', and the
variable must be a user variable according to `user-variable-p'." nil [37465 38056]) ("color-theme-print-alist" function nil ("alist") nil "Print ALIST." nil [38058 38323]) ("color-theme-get-faces" function nil nil nil "Return a list of faces usable in a color theme.
Such an alist may be installed by `color-theme-install-faces'.  The
faces returned must not match `color-theme-illegal-faces'." nil [38325 38798]) ("color-theme-get-face-definitions" function nil nil nil "Return face settings usable in a color-theme." nil [38800 38972]) ("color-theme-print-faces" function nil ("faces") nil "Print face settings for all faces returned by `color-theme-get-faces'." nil [38974 39245]) ("color-theme-reset-faces" function nil nil nil "Reset face settings for all faces returned by `color-theme-get-faces'." nil [39247 39823]) ("color-theme-print-theme" function nil ("func" "doc" "params" "vars" "faces") nil "Print a theme into the current buffer.
FUNC is the function name, DOC the doc string, PARAMS the
frame parameters, VARS the variable bindings, and FACES
the list of faces and their specs." nil [39825 40589]) ("color-theme-print" function nil ("&optional" "buf") ((user-visible . t)) "Print the current color theme function.

You can contribute this function to <URL:news:gnu.emacs.sources> or
paste it into your .emacs file and call it.  That should recreate all
the settings necessary for your color theme.

Example:

    (require 'color-theme)
    (defun my-color-theme ()
      \"Color theme by Alex Schroeder, created 2000-05-17.\"
      (interactive)
      (color-theme-install
       '(...
	 ...
	 ...)))
    (my-color-theme)

If you want to use a specific color theme function, you can call the
color theme function in your .emacs directly.

Example:

    (require 'color-theme)
    (color-theme-gnome2)" nil [40606 42075]) ("color-theme-analyze-find-theme" function nil ("code") nil "Find the sexpr that calls `color-theme-install'." nil [42077 42424]) ("color-theme-analyze-add-face" function nil ("a" "b" "regexp" "faces") nil "If only one of A or B are in FACES, the other is added, and FACES is returned.
If REGEXP is given, this is only done if faces contains a match for regexps." nil [42989 43623]) ("color-theme-analyze-add-faces" function nil ("faces") nil "Add missing faces to FACES and return it." nil [44590 47853]) ("color-theme-analyze-remove-heights" function nil ("faces") nil "Remove :height property where it is an integer and return FACES." nil [47855 48807]) ("color-theme-analyze-defun" function nil nil ((user-visible . t)) "Once you have a color-theme printed, check for missing faces.
This is used by maintainers who receive a color-theme submission
and want to make sure it follows the guidelines by the color-theme
author." nil [49052 51089]) ("color-theme-snapshot" function nil nil nil nil nil [51143 51175]) ("color-theme-make-snapshot" function nil nil nil "Return the definition of the current color-theme.
The function returned will recreate the color-theme in use at the moment." nil [51192 51939]) ("color-theme-frame-param-frobbing-rules" variable nil (quote ((foreground-color default foreground) (background-color default background))) nil "List of rules to use when frobbing faces based on frame parameters.
This is only necessary for XEmacs, because in Emacs 21 changing the
frame paramters automatically affects the relevant faces." nil [52001 52331]) ("color-theme-frob-faces" function nil ("params") nil "Change certain faces according to PARAMS.
This uses `color-theme-frame-param-frobbing-rules'." nil [52390 52820]) ("color-theme-alist-reduce" function nil ("old-list") nil "Reduce OLD-LIST.
The resulting list will be newly allocated and will not contain any elements
with duplicate cars.  This will speed the installation of new themes by
only installing unique attributes." nil [52822 53215]) ("color-theme-install-frame-params" function nil ("params") nil "Change frame parameters using alist PARAMETERS.

If `color-theme-is-global' is non-nil, all frames are modified using
`modify-frame-parameters' and the PARAMETERS are prepended to
`default-frame-alist'.  The value of `initial-frame-alist' is not
modified.  If `color-theme-is-global' is nil, only the selected frame is
modified.  If `color-theme-is-cumulative' is nil, the frame parameters
are restored from `color-theme-original-frame-alist'.

If the current frame parameters have a parameter `minibuffer' with
value `only', then the frame parameters are not installed, since this
indicates a dedicated minibuffer frame.

Called from `color-theme-install'." nil [53217 55257]) ("color-theme-install-variables" function nil ("vars") nil "Change variables using alist VARS.
All variables matching `color-theme-legal-variables' are set.

If `color-theme-is-global' and `color-theme-xemacs-p' are nil, variables
are made frame-local before setting them.  Variables are set using `set'
in either case.  This may lead to problems if changing the variable
requires the usage of the function specified with the :set tag in
defcustom declarations.

Called from `color-theme-install'." nil [55332 56095]) ("color-theme-install-faces" function nil ("faces") nil "Change faces using FACES.

Change faces for all frames and create any faces listed in FACES which
don't exist.  The modified faces will be marked as \"unchanged from
its standard setting\".  This is OK, since the changes made by
installing a color theme should never by saved in .emacs by
customization code.

FACES should be a list where each entry has the form:

  (FACE SPEC)

See `defface' for the format of SPEC.

If `color-theme-is-global' is non-nil, faces are modified on all frames
using `face-spec-set'.  If `color-theme-is-global' is nil, faces are
only modified on the selected frame.  Non-existing faces are created
using `make-empty-face' in either case.  If `color-theme-is-cumulative'
is nil, all faces are reset before installing the new faces.

Called from `color-theme-install'." nil [56097 58099]) ("color-theme-canonic" function nil ("theme") nil "Return the canonic form of THEME.
This deals with all the backwards compatibility stuff." nil [59036 59613]) ("color-theme-function" function nil ("theme") nil "Return function used to create THEME." nil [59615 59709]) ("color-theme-frame-params" function nil ("theme") nil "Return frame-parameters defined by THEME." nil [59711 59813]) ("color-theme-variables" function nil ("theme") nil "Return variables set by THEME." nil [59815 59903]) ("color-theme-faces" function nil ("theme") nil "Return faces defined by THEME." nil [59905 59989]) ("color-theme-merge-alists" function nil ("&rest" "alists") nil "Merges all the alist arguments into one alist.
Only the first instance of every key will be part of the resulting
alist.  Membership will be tested using `assq'." nil [59991 60365]) ("color-theme-compare" function nil ("theme-a" "theme-b") ((user-visible . t)) "Compare two color themes.
This will print the differences between installing THEME-A and
installing THEME-B.  Note that the order is important: If a face is
defined in THEME-A and not in THEME-B, then this will not show up as a
difference, because there is no reset before installing THEME-B.  If a
face is defined in THEME-B and not in THEME-A, then this will show up as
a difference." nil [60752 62434]) ("color-theme-install" function nil ("theme") nil "Install a color theme defined by frame parameters, variables and faces.

The theme is installed for all present and future frames; any missing
faces are created.  See `color-theme-install-faces'.

THEME is a color theme definition.  See below for more information.

If you want to install a color theme from your .emacs, use the output
generated by `color-theme-print'.  This produces color theme function
which you can copy to your .emacs.

A color theme definition is a list:
([FUNCTION] FRAME-PARAMETERS VARIABLE-SETTINGS FACE-DEFINITIONS)

FUNCTION is the color theme function which called `color-theme-install'.
This is no longer used.  There was a time when this package supported
automatic factoring of color themes.  This has been abandoned.

FRAME-PARAMETERS is an alist of frame parameters.  These are installed
with `color-theme-install-frame-params'.  These are installed last such
that any changes to the default face can be changed by the frame
parameters.

VARIABLE-DEFINITIONS is an alist of variable settings.  These are
installed with `color-theme-install-variables'.

FACE-DEFINITIONS is an alist of face definitions.  These are installed
with `color-theme-install-faces'.

If `color-theme-is-cumulative' is nil, a color theme will undo face and
frame-parameter settings of previous color themes." nil [62483 64199]) ("color-theme-submit" function nil nil ((user-visible . t)) "Submit your color-theme to the maintainer." nil [64241 66159]) ("define-color-theme" function nil ("name" "author" "description" "&rest" "forms") nil (let ((n name)) (\` (progn (add-to-list (quote color-themes) (list (quote (\, n)) (upcase-initials (replace-in-string (replace-in-string (symbol-name (quote (\, n))) "^color-theme-" "") "-" " ")) (\, author))) (defun (\, n) nil (\, description) (interactive) (\,@ forms))))) nil [66193 66676]) ("color-theme-initialize" function nil nil ((user-visible . t)) "Initialize the color theme package by loading color-theme-libraries." nil [66723 67255]) ("when" code nil [67257 67376]) ("color-theme" package nil nil nil [67616 67638]))
    :unmatched-syntax 'nil
    )
   )
  )
